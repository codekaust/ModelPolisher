apply plugin: "java"

defaultTasks "clean", "lightJar"
// Java versions for compilation and output
sourceCompatibility = "1.11"
targetCompatibility = "1.11"
archivesBaseName = "ModelPolisher"

version = "2.0.1"

sourceSets {
    main.java.srcDirs = ["src/main/java"]
    main.resources.srcDirs = ["src/main/resources"]
    test.java.srcDirs = ["src/test/java"]
}

repositories {
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots"}
    // local dependencies
    flatDir {
        dirs "lib/de/zbit/SysBio/1390"
    }
}

dependencies {
    compile "org.sbml.jsbml:jsbml:1.4"
    compile "de.zbit:SysBio:1390"
    compile "org.postgresql:postgresql:42.2.2"
    compile "org.biojava:biojava-ontology:5.0.0"
    compile 'us.hebi.matlab.mat:mfl-core:0.5.3'
    compile "com.fasterxml.jackson.core:jackson-core:2.10.1"
    compile "com.fasterxml.jackson.core:jackson-databind:2.10.1"
    compile "net.sf.jtidy:jtidy:r938"
    compile "de.uni-rostock.sbi:CombineArchive:1.4.0"
    compile "com.zaxxer:HikariCP:3.4.2"
    testCompile "org.junit.jupiter:junit-jupiter-engine:5.1.0"
}

test {
    testLogging {
        showStandardStreams = true
    }
}

// get latest version of MIRIAM registry
task downloadMIRIAM(){
    doFirst{
        String registry = new URL("https://registry.api.identifiers.org/resolutionApi/getResolverDataset").getText()
        File parentDir = new File("src/main/resources/edu/ucsd/sbrg/miriam/");
        if(!parentDir.exists()){
            mkdir(parentDir)
        }
        File registryFile = new File("src/main/resources/edu/ucsd/sbrg/miriam/IdentifiersOrg-Registry.json")
        BufferedWriter writer = new BufferedWriter(new FileWriter(registryFile))
        writer.write(registry)
        writer.close()
    }
}

// config for all jar tasks
tasks.withType(Jar) {
    dependsOn test
    dependsOn downloadMIRIAM
    destinationDirectory = file("$rootDir/target")
    manifest {
        attributes(
                "Version": project.version,
                "Implementation-Title": "ModelPolisher",
                "Implementation-Version": project.version,
                "Specification-Vendor": "University of California, San Diego",
                "Specification-Title": "ModelPolisher",
                "Implementation-Vendor-Id": "edu.ucsd.sbrg",
                "Implementation-Vendor": "University of California, San Diego",
                "Main-Class": "edu.ucsd.sbrg.bigg.ModelPolisher"
        )
    }
}

//with dependencies
task lightJar(type: Jar) {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    with jar
    dependsOn downloadMIRIAM
}

//build docker container
task devel(type: Exec){
    commandLine "sh", "-c", "cp target/ModelPolisher-" + project.version + ".jar docker/java_docker && " +
            "export COMPOSE_FILE=docker-compose.devel.yml && " +
            "docker-compose pull && " +
            "docker-compose build && " +
            "rm docker/java_docker/ModelPolisher-" + project.version + ".jar"
    dependsOn lightJar
}

// zip lib folder for release
task zipLibs(type: Zip) {
    from "lib"
    into "lib"
    include "**/**"
    archiveFileName = "lib.zip"
    destinationDirectory = file("target/")
}

// zip script files for release
task zipScripts(type: Zip) {
    from "src/scripts"
    into "scripts"
    include "**/**"
    archiveFileName = "scripts.zip"
    destinationDirectory = file("target/")
}

// create lightJar for release
task release() {
    dependsOn lightJar
    dependsOn tasks["zipLibs"]
    dependsOn tasks["zipScripts"]
}

// clean up target directory
clean.doFirst {
    file(".gradle").deleteDir()
    file("target").deleteDir()
}

// bump jar version in ModelPolisher.sh
if (project.file("./src/scripts/ModelPolisher.sh").exists()) {
    task bumpVersionMP() {
        replaceVersion("docker/java_docker/Dockerfile")
        replaceVersion(".travis.yml")
        replaceVersion("README.md")
        replaceVersion("./src/scripts/ModelPolisher.sh")
    }
    processResources.dependsOn bumpVersionMP
}

def replaceVersion(path) {
    ArrayList<String> content = new ArrayList<>()
    File travisFile = new File(path)
    String MPVersion = /ModelPolisher-(.*?)\d{1,2}(.\d{1,2}){1,2}.jar/
    travisFile.eachLine {
        line ->
            content.add(line.replaceAll(MPVersion, "ModelPolisher-" + "${version}.jar"))
    }
    BufferedWriter writer = new BufferedWriter(new FileWriter(travisFile))
    content.each {
        line -> writer.writeLine(line)
    }
    writer.close()
}
